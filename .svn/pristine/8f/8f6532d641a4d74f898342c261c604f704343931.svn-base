package com.evergrande.hdmp.usertags.action.sms;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Calendar;
import java.util.concurrent.atomic.AtomicLong;


/**
 * @author Changhua, Wu
 *         Created on: 2/23/16,1:53 PM
 */
public class LockFreeSequenceGenerator {

    private final static Logger logger = LoggerFactory.getLogger(LockFreeSequenceGenerator.class);


    public static final AtomicLong sequenceTickNum = new AtomicLong(0L);

    public static final long MAX_ROLL_BACK_LIMIT = 999999980L;
    public static final long SAFE_ROLLBACK_POINT = 999999970L;
    public static final long SAFE_ROLLBACK_GAP   = 10L;

    public static void  appendFixedLengthNumberValue(StringBuffer sb, int fixLength, long number) {
        String valStr = String.valueOf( number );
        int gap = fixLength - valStr.length();
        if( gap > 0 ) {
            for(int i= 0; i< gap; ++i) {
                sb.append('0');
            }
        }
        sb.append(valStr);
    }

    public static String  getSmsSequenceNum() {

        Calendar cal = Calendar.getInstance();
        StringBuffer  sb = new StringBuffer();

        appendFixedLengthNumberValue( sb, 4, cal.get(Calendar.YEAR));
        appendFixedLengthNumberValue( sb, 3, cal.get(Calendar.DAY_OF_YEAR));
        appendFixedLengthNumberValue( sb, 2, cal.get(Calendar.HOUR_OF_DAY));
        appendFixedLengthNumberValue( sb, 2, cal.get(Calendar.MINUTE));
        // 20 -11 = 9

        long  tickNum = sequenceTickNum.getAndIncrement();

        if(tickNum > SAFE_ROLLBACK_POINT) { // Note, for safe CAS operation, number of concurrent Threads should less then 20

            for(int i=0; i<SAFE_ROLLBACK_GAP; ++i) {
                boolean result = sequenceTickNum.compareAndSet(tickNum+i, 0L);
                if(result) {
                    logger.info(" rollback sequenceTickNum from maximum {} to 0 ", tickNum + i);
                    break;
                } else {
                    if(sequenceTickNum.get() < SAFE_ROLLBACK_POINT) {
                        break;
                    }
                }
            }

        }
        appendFixedLengthNumberValue( sb, 9,  tickNum );

        return sb.toString();
    }

}
