package com.evergrande.hdmp.usertags.logicquery.impl;

import com.evergrande.hdmp.usertags.logicquery.TagConditionVisitor;
import com.evergrande.hdmp.usertags.logicquery.TagCondition;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * @author Changhua, Wu
 *         Created on: 1/19/16,3:18 PM
 */
public class TagConditionHashSetHandler implements TagConditionVisitor<TagQueryResultHashSetImpl> {




    public TagQueryResultHashSetImpl mockResult(Match tag) {
        TagQueryResultHashSetImpl result = new TagQueryResultHashSetImpl();
        switch (tag.getTag()) {
            case "Person:Male":
                result.getUsers().add("1");
                result.getUsers().add("3");
                result.getUsers().add("5");
                result.getUsers().add("7");
                result.getUsers().add("9");
                result.getUsers().add("11");
                return result;
            case "Person:FeMale":
                result.getUsers().add("2");
                result.getUsers().add("4");
                result.getUsers().add("6");
                result.getUsers().add("8");
                result.getUsers().add("10");
                result.getUsers().add("12");
                return result;
            case "Age:10-20":
                result.getUsers().add("1");
                result.getUsers().add("2");
                result.getUsers().add("3");
                result.getUsers().add("4");
                return result;
            case "Age:20-30":
                result.getUsers().add("5");
                result.getUsers().add("6");
                result.getUsers().add("7");
                result.getUsers().add("8");
                return result;
            case "Age:30-40":
                result.getUsers().add("9");
                result.getUsers().add("10");
                result.getUsers().add("11");
                result.getUsers().add("12");
                return result;
            case "Area:GuZhou":
                result.getUsers().add("1");
                result.getUsers().add("2");
                result.getUsers().add("3");
                result.getUsers().add("4");
                result.getUsers().add("5");
                result.getUsers().add("6");
                return result;
            case "Area:ShangHai":
                result.getUsers().add("7");
                result.getUsers().add("8");
                result.getUsers().add("9");
                return result;
            case "Area:ShenZhen":
                result.getUsers().add("10");
                result.getUsers().add("11");
                result.getUsers().add("12");
                return result;
            default:
                return null;
        }
    }

    public TagQueryResultHashSetImpl mockAnd(List<TagQueryResultHashSetImpl> subResults) {
        TagQueryResultHashSetImpl result = new TagQueryResultHashSetImpl();

        if(subResults.size()>0) {
            TagQueryResultHashSetImpl r1 = subResults.get(0);

            for(Iterator<String> ite = r1.getUsers().iterator(); ite.hasNext() ; ) {
                String e1 = ite.next();
                boolean userInAllCondition = true;
                for(Iterator<TagQueryResultHashSetImpl>  ite2 = subResults.iterator(); ite2.hasNext() && (userInAllCondition); ) {
                    TagQueryResultHashSetImpl r2 = ite2.next();
                    if(r1 != r2) {
                        if(!r2.getUsers().contains(e1)) {
                            userInAllCondition = false;
                        }
                    }
                }
                if(userInAllCondition) {
                    result.getUsers().add( e1 );
                }
            }
        }


        return result;
    }

    public TagQueryResultHashSetImpl mockOr(List<TagQueryResultHashSetImpl> subResults) {
        TagQueryResultHashSetImpl result = new TagQueryResultHashSetImpl();

        for(TagQueryResultHashSetImpl rx : subResults) {
            result.getUsers().addAll( rx.getUsers() );
        }

        return result;
    }

    @Override
    public TagQueryResultHashSetImpl visitTagCondition(TagCondition op) {
        if(op instanceof Match) {
            Match match = (Match) op;
            TagQueryResultHashSetImpl result = mockResult(match);
            return result;
        } else if (op instanceof And) {

            And opAnd = (And) op;
            List<TagQueryResultHashSetImpl> subResults = new ArrayList<>();
            for(TagCondition condition: opAnd.conditions) {
                TagQueryResultHashSetImpl r1 = this.visitTagCondition(condition);
                subResults.add(r1);
            }
            TagQueryResultHashSetImpl result = mockAnd(subResults);
            return result;
        } else if (op instanceof Or) {

            Or opOr = (Or) op;
            List<TagQueryResultHashSetImpl> subResults = new ArrayList<>();
            for(TagCondition condition: opOr.conditions) {
                TagQueryResultHashSetImpl r1 = this.visitTagCondition( condition);
                subResults.add(r1);
            }
            TagQueryResultHashSetImpl result =  mockOr(subResults);
            return result;
        }

        return null;
    }
}
