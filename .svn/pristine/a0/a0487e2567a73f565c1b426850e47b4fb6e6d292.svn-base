package com.evergrande.hdmp.usertags.logicquery.impl;

/**
 * @author Changhua, Wu
 *         Created on: 1/19/16,04:03 PM
 */

import com.evergrande.hdmp.usertags.service.impl.CacheServiceRedisImpl;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;
import redis.clients.jedis.*;

import java.io.IOException;
import java.util.*;

@Ignore
public class RedisTest {


    public static String getTagToCustKey(String tag) {
        final String TAG_K = "hdmp-tags2cust-";
        StringBuffer bf = new StringBuffer(TAG_K);
        bf.append(tag);
        return bf.toString();
    }

    public static void main(String[] args) throws IOException {

        RedisTest app = new RedisTest();

       // app.testClusterModeRedis();

       // app.testClientShade();


        boolean exit = false;

        if (exit) {
            return;
        }
        else {
            testOnSetOperations();
        }

    }

    @Test
    public void testBytes() {

        Jedis jedis = new Jedis( "localhost" , 7777, 0);

        final String testBitKey = "test-bit-UnitTest";

        long[] allOnBitIndexes =  {
            1, 2,4,6,
            12345, 54321, 66658, 97763,
            100001,100002,100003,100004,
            1200001,1200002,1200003,1200004,
                435345, 4512364, 78823, 234111
        };

        jedis.del( testBitKey );

        for(long l: allOnBitIndexes) {
            jedis.setbit(testBitKey, l,  true);
        }


        byte[] redisValueBytes = jedis.get( testBitKey.getBytes() );

        BitSet localBitSet = CacheServiceRedisImpl.fromByteArrayReverse(redisValueBytes);

        Assert.assertTrue( localBitSet.cardinality() == allOnBitIndexes.length );
        for(long l: allOnBitIndexes) {
            Assert.assertTrue( localBitSet.get( (int)l ) );
        }

    }





    public static void testOnSetOperations() {

        Jedis jedis = new Jedis("localhost", 7777);
        //JedisCluster jedis = new RedisTest().createClusterClient();

        //##################
        String[] aa = null;
        jedis.sadd( getTagToCustKey("性别:男"), aa );
        jedis.sadd( getTagToCustKey("性别:女"), "cust_002"  );
        jedis.sadd( getTagToCustKey("性别:男"), "cust_003"  );
        jedis.sadd( getTagToCustKey("性别:女"), "cust_004"  );
        jedis.sadd( getTagToCustKey("性别:男"), "cust_005"  );
        jedis.sadd( getTagToCustKey("性别:女"), "cust_006"  );
        //jedis.sadd( getTagToCustKey("性别:女"), "cust_007"  );
        //jedis.sadd( getTagToCustKey("性别:女"), "cust_008"  );
        //jedis.sadd( getTagToCustKey("性别:女"), "cust_009"  );

        //##################
        jedis.sadd( getTagToCustKey("age:30~40"), "cust_001"  );
        jedis.sadd( getTagToCustKey("age:20~30"), "cust_002"  );
        jedis.sadd( getTagToCustKey("age:20~30"), "cust_003"  );

        jedis.sadd( getTagToCustKey("age:20~30"), "cust_004"  );
        jedis.sadd( getTagToCustKey("age:30~40"), "cust_005"  );
        jedis.sadd( getTagToCustKey("age:30~40"), "cust_006"  );
        //jedis.sadd( getTagToCustKey("性别:女"), "cust_007"  );
        jedis.sadd( getTagToCustKey("age:20~30"), "cust_008"  );
        //jedis.sadd( getTagToCustKey("age:30~40"), "cust_009"  );

        //##################
        jedis.sadd( getTagToCustKey("buy-room:N"), "cust_001"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_002"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_003"  );

        jedis.sadd( getTagToCustKey("buy-room:N"), "cust_004"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_005"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_006"  );
        //jedis.sadd( getTagToCustKey("性别:女"), "cust_007"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_008"  );
        jedis.sadd( getTagToCustKey("buy-room:Y"), "cust_009"  );
        BitSet bitSet;

        BitSet age10_cust = new BitSet();
        BitSet age40_cust = new BitSet();
        age10_cust.or( age40_cust );

        /*
        人群１	性别＝'男' 	visitAnd ( 年龄="20~30" visitOr  "30~40" )
	  visitOr
        人群2	理财产品="Y" 	visitAnd  ( 年龄="30~40" visitOr "40~50" )
         */

        long t_male = jedis.scard( getTagToCustKey("性别:男"));
        long t_female = jedis.scard( getTagToCustKey("性别:女"));
        long t_age_2030 = jedis.scard( getTagToCustKey("age:20~30"));
        long t_age_3040 = jedis.scard( getTagToCustKey("age:30~40"));
        long t_room_y = jedis.scard( getTagToCustKey("buy-room:Y"));
        long t_room_n = jedis.scard( getTagToCustKey("buy-room:N"));


        //"age:20~30||age:30~40"
        jedis.sunionstore( getTagToCustKey("temp-key-for-login-user001"), getTagToCustKey("age:20~30"), getTagToCustKey("age:30~40"));
        Set<String>  tempSet = jedis.smembers( getTagToCustKey("temp-key-for-login-user001"));
        System.out.println("age:20~30||age:30~40: " + tempSet.toString() );

        Set<String> group_01 = jedis.sinter(getTagToCustKey("性别:男"), getTagToCustKey("temp-key-for-login-user001"));

        System.out.println("group_01: " + group_01.toString() );

        //"age:30~40||age:40~50"
        jedis.sunionstore( getTagToCustKey("temp-key-for-login-user001"), getTagToCustKey("age:30~40"), getTagToCustKey("age:40~50") );
        tempSet = jedis.smembers( getTagToCustKey("temp-key-for-login-user001"));
        System.out.println("age:30~40||age:40~50: " + tempSet.toString() );

        Set<String> group_02 = jedis.sinter(getTagToCustKey("buy-room:Y"), getTagToCustKey("temp-key-for-login-user001"));

        System.out.println("group_02: " + group_02.toString() );



        //TODO: also move to Redis internal union of set
        group_01.addAll( group_02 );

        System.out.println("merged union of group_01 + group_02: " + group_01.toString() );


    }





    void testClientShade() throws IOException {
        JedisPoolConfig poolConfig = new JedisPoolConfig();
        poolConfig.setMaxTotal(100);
        poolConfig.setMaxIdle(4);
        poolConfig.setMaxIdle(200);
        poolConfig.setMaxWaitMillis(1000 * 10);
        poolConfig.setTestOnBorrow(true);
        poolConfig.setTestOnReturn(true);

        List<JedisShardInfo> infoList = new ArrayList<JedisShardInfo>();
        infoList.add( new JedisShardInfo("127.0.0.1", 6379));
        infoList.add( new JedisShardInfo("127.0.0.1", 6389));
        infoList.add( new JedisShardInfo("127.0.0.1", 6399));

        infoList.add( new JedisShardInfo("127.0.0.1", 6409));
        infoList.add( new JedisShardInfo("127.0.0.1", 6419));
        infoList.add( new JedisShardInfo("127.0.0.1", 6429));
        ShardedJedisPool pool = new ShardedJedisPool(poolConfig, infoList);

        JedisPool pool1=new JedisPool("127.0.0.1", 6379);
        JedisPool pool2=new JedisPool("127.0.0.1", 6389);
        Jedis jedis = pool1.getResource();
        ShardedJedis jedisShared = pool.getResource();

        Jedis value = jedisShared.getShard("last");
////////////


        ShardedJedis jds = pool.getResource();



        //////////

        String key = "last";
        String res = value.get(key);

        System.out.println(key+":"+jds.getShard(key).getClient().getPort());
        System.out.println(" key = last,  value = " + res);

        System.out.println(jds.set(key,Math.random()+""));
    }


    public void testClusterModeRedis() throws IOException {

        JedisCluster jc = createClusterClient();
        jc.set("last", "lasdosf");

        jc.incrBy("counter", 10);


        System.out.println("value in Cluster:"+ jc.get("last"));
        System.out.println("value in Cluster:"+ jc.get("head"));

        String key = "last";

        jc.close();



    }

    public JedisCluster createClusterClient () {
        Set<HostAndPort> jedisClusterNodes = new HashSet<HostAndPort>();
        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6379));
        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6389));
        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6399));

        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6409));
        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6419));
        jedisClusterNodes.add(new HostAndPort("127.0.0.1", 6429));

        JedisCluster jc = new JedisCluster(jedisClusterNodes);

        return jc;
    }


}
