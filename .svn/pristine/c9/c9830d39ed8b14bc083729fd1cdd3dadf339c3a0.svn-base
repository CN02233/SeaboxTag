package com.evergrande.hdmp.usertags.service;

import org.junit.Assert;
import org.junit.Test;

/**
 * @author Changhua, Wu
 *         Created on: 3/17/16,10:05 AM
 */
public class TaskBreakExecutorTest {




    @Test
    public void testExecutorThreadWithSmallRequestNumber() throws InterruptedException {

        TaskBreakExecutor breakExecutor = new TaskBreakExecutor("testExecutorThreadAllocation--subTask", 10, 7, false) {


            @Override
            public void onComplete(int taskId) {
                // dummy
            }

            @Override
            public void execOne(int taskId, long index) {

                Assert.assertTrue( taskId>=0 && taskId < 7);

                countStart(taskId );
                // dummy function, do nothing.
                if(taskId ==0) {
                    Assert.assertTrue(index >= 0);
                    Assert.assertTrue(index < 1);
                } else if(taskId ==1) {
                    Assert.assertTrue(index >=  1);
                    Assert.assertTrue(index < 2);
                } else if(taskId ==2) {
                    Assert.assertTrue(index >= 2 );
                    Assert.assertTrue(index <  3);
                } else if(taskId ==3) {
                    Assert.assertTrue(index >= 3 );
                    Assert.assertTrue(index < 4);
                } else if(taskId ==6) {
                    Assert.assertTrue(index >= 6 );
                    Assert.assertTrue(index < 7);
                }

                if(index == 5) { // Simulate only one Error
                    countError(taskId);
                } else {
                    countComplete( taskId );
                }

            }

            @Override
            public void execRange(int taskId, long start, long end) {
                // dummy function
            }


            @Override
            protected void init() {

            }


        } ;

        BigTaskBreakUtil.breakExec(breakExecutor);

        for(int i=0; i<7; ++i) {
            Assert.assertTrue( breakExecutor.getStartCounterMapByTaskId().get(i).get() == 1);
            Assert.assertTrue( breakExecutor.getErrorCounterMapByTaskId().get( i ).get() ==  ((5==i)? 1 : 0) );
            Assert.assertTrue( breakExecutor.getCompleteCounterMapByTaskId().get( i ).get() == ((5==i)? 0 : 1) );
        }

        Assert.assertTrue( breakExecutor.getCountStart() == 7 );
        Assert.assertTrue( breakExecutor.getCountComplete() ==  7 -1 );
        Assert.assertTrue( breakExecutor.getCountError() == 1  );
    }


    @Test
    public void testExecutorThreadAllocation() throws InterruptedException {

        TaskBreakExecutor breakExecutor = new TaskBreakExecutor("testExecutorThreadAllocation--subTask", 10, 1923423, false) {

            @Override
            public void onComplete(int taskId) {
                // dummy
            }

            @Override
            public void execOne(int taskId, long index) {

                Assert.assertTrue( taskId>=0 && taskId < 10);

                countStart( taskId );
                // dummy function, do nothing.
                if(taskId ==0) {
                    Assert.assertTrue(index >= 0);
                    Assert.assertTrue(index <192342 + 1);
                } else if(taskId ==1) {
                    Assert.assertTrue(index >= 192342 + 1);
                    Assert.assertTrue(index < (192342 + 1 )* 2);
                } else if(taskId ==2) {
                    Assert.assertTrue(index >= 2*(192342 + 1) );
                    Assert.assertTrue(index < (192342 + 1 )* 3);
                } else if(taskId ==3) {
                    Assert.assertTrue(index >= 3*(192342 + 1) );
                    Assert.assertTrue(index < (192342 + 1 )* 3 + 192342);
                } else if(taskId == 10) {
                    Assert.assertTrue(index >= 1923420 +3);
                    Assert.assertTrue(index < 1923423);
                }

                if(index == 1923421) { // Simulate only one Error
                    countError(taskId);
                } else {
                    countComplete( taskId );
                }

            }

            @Override
            public void execRange(int taskId, long start, long end) {
                // dummy function
            }


            @Override
            protected void init() {

            }


        } ;

        BigTaskBreakUtil.breakExec(breakExecutor);

        for(int i=0; i<3; ++i) {
            Assert.assertTrue( breakExecutor.getStartCounterMapByTaskId().get(i).get() == 192342 +1);
            Assert.assertTrue( breakExecutor.getErrorCounterMapByTaskId().get( i ).get() == 0 );
            Assert.assertTrue( breakExecutor.getCompleteCounterMapByTaskId().get( i ).get() == 192342 +1 );
        }

        for(int i=3; i<9; ++i) {
            Assert.assertTrue( breakExecutor.getStartCounterMapByTaskId().get(i).get() == 192342 );
            Assert.assertTrue( breakExecutor.getErrorCounterMapByTaskId().get( i ).get() == 0 );
            Assert.assertTrue( breakExecutor.getCompleteCounterMapByTaskId().get( i ).get() == 192342 );
        }


        for(int i=9; i<10; ++i) {
            Assert.assertTrue( breakExecutor.getStartCounterMapByTaskId().get(i).get() == 192342 );
            Assert.assertTrue( breakExecutor.getErrorCounterMapByTaskId().get( i ).get() == 1 );
            Assert.assertTrue( breakExecutor.getCompleteCounterMapByTaskId().get( i ).get() == 192342 -1 );
        }

        Assert.assertTrue( breakExecutor.getCountStart() == 1923423 );
        Assert.assertTrue( breakExecutor.getCountComplete() ==  1923422 );
        Assert.assertTrue( breakExecutor.getCountError() == 1  );
    }

}
