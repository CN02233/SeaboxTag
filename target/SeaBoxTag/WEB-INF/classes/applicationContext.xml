<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/aop   
            http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
            http://www.springframework.org/schema/beans   
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context   
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
            http://www.springframework.org/schema/mvc   
            http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
            http://www.springframework.org/schema/tx   
            http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<context:component-scan base-package="com.seabox.tagsys.**">
		<context:include-filter type="annotation" expression="com.seabox.tagsys.usertags.utils.SingletonBean" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="locations">
			<list>
				<value>classpath:redis.properties</value>
				<value>classpath:jdbc.properties</value>
				<value>classpath:usertags-config.properties</value>
			</list>
		</property>
	</bean>
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>
	<!-- Realm实现 -->
	<bean id="userRealm" class="com.seabox.tagsys.sys.realm.UserRealm">
	</bean>
	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
	</bean>
	<!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
			value="org.apache.shiro.SecurityUtils.setSecurityManager" />
		<property name="arguments" ref="securityManager" />
	</bean>
	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/index.jsp" />
		<property name="filterChainDefinitions">
			<value>
				/index.jsp = anon
				/logout = logout
			</value>
		</property>
	</bean>
	<!-- Shiro生命周期处理器 -->
	<!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />-->
	<!-- Bean setting for Cache with Redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="2000" />
		<property name="maxIdle" value="10000" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<property name="testOnBorrow" value="true" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="jedisPoolConfig" />
		<constructor-arg name="host" value="${redis.host}" />
		<constructor-arg name="port" value="${redis.port}" />
		<!--<constructor-arg name="password" value="${redis.authenticate}" />-->
		<constructor-arg name="timeout" value="${redis.timeout}" />
		<!-- <constructor-arg name="password" value="${redis.password}" /> -->
	</bean>

	<!--<bean id="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">-->
		<!--<property name="corePoolSize" value="10" />-->
		<!--<property name="maxPoolSize" value="100" />-->
		<!--<property name="queueCapacity" value="500" />-->
	<!--</bean>-->


	<!--&lt;!&ndash;  following are Cron Jobs for Camp-Action in Stages &ndash;&gt;-->

	<!--<bean id="jobDetailStage1Prepare" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="stage1PrepareScanJob" />-->
		<!--<property name="targetMethod" value="doScan" />-->
	<!--</bean>-->

	<!--<bean id="triggerStage1Prepare" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobDetailStage1Prepare" />-->
		<!--<property name="cronExpression" value="10 0/1 * * * ?" />-->
	<!--</bean>-->


	<!--<bean id="jobDetailStage2Action" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="stage2ActionScanJob" />-->
		<!--<property name="targetMethod" value="doScan" />-->
	<!--</bean>-->

	<!--<bean id="triggerStage2Action" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobDetailStage2Action" />-->
		<!--&lt;!&ndash;  default  exec on each  2 mins interval @ 40seconds , only within the hour interval of 08:00 ~ 20:00 &ndash;&gt;-->
		<!--<property name="cronExpression" value="40 0/2 8-19 * * ?" />-->
	<!--</bean>-->

	<!--<bean id="jobDetailStatsDump" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="healthStatsDumpJob" />-->
		<!--<property name="targetMethod" value="doDump" />-->
	<!--</bean>-->

	<!--<bean id="triggerStatsDump" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobDetailStatsDump" />-->
		<!--&lt;!&ndash;  default  exec on each  5 mins interval @ 55seconds &ndash;&gt;-->
		<!--<property name="cronExpression" value="55 0/5 * * * ?" />-->
	<!--</bean>-->


	<!--<bean id="jobDetailSmsTaskManager_pauseExecTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="smsTaskManager" />-->
		<!--<property name="targetMethod" value="pauseExecTask" />-->
	<!--</bean>-->

	<!--<bean id="triggerSmsTaskManager_pauseExecTask" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobDetailSmsTaskManager_pauseExecTask" />-->
		<!--&lt;!&ndash;  stop all SMS send on 20:00 (19:59:55, leave some space before that time) &ndash;&gt;-->
		<!--<property name="cronExpression" value="55 59 19 * * ?" />-->
	<!--</bean>-->


	<!--<bean id="jobDetailSmsTaskManager_resumeExecTask" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject" ref="smsTaskManager" />-->
		<!--<property name="targetMethod" value="resumeExecTask" />-->
	<!--</bean>-->

	<!--<bean id="triggerSmsTaskManager_resumeExecTask" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobDetailSmsTaskManager_resumeExecTask" />-->
		<!--&lt;!&ndash;  resume/start all SMS send on 08:00 (08:00:05, leave some space after that time) &ndash;&gt;-->
		<!--<property name="cronExpression" value="5 0 8 * * ?" />-->
	<!--</bean>-->


	<!--<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
		<!--<property name="triggers">-->
			<!--<list>-->
				<!--<ref bean="triggerStage1Prepare" />-->
				<!--<ref bean="triggerStage2Action" />-->
				<!--<ref bean="triggerStatsDump" />-->
				<!--<ref bean="triggerSmsTaskManager_pauseExecTask" />-->
				<!--<ref bean="triggerSmsTaskManager_resumeExecTask" />-->
			<!--</list>-->
		<!--</property>-->
		<!--<property name="taskExecutor" ref="executor" />-->
	<!--</bean>-->



</beans>